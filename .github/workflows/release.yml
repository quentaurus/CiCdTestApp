name: CI/CD Pipeline

on:
  push:
    branches:
      - main   # Run CI on every push to main
    tags:
      - "v*"   # Only run when pushing a version tag like v1.0.0
  pull_request:
    branches:
      - main  # Run CI on every PR to main
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write  # Grants permission to create releases

jobs:
  build-test:
    name: Build and Test on JDK ${{ matrix.java }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [17, 23]  # ✅ Run on JDK 17 and 23

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ matrix.java }}
          cache: "maven"

      - name: Build with Maven (JDK ${{ matrix.java }})
        run: mvn clean package -DskipTests -T1C

      - name: Run Tests (JDK ${{ matrix.java }})
        run: mvn test -T1C

      - name: Run Tests with Incubating Features (Only JDK 23)
        if: matrix.java == 23  # ✅ Run only for JDK 23
        run: mvn test -DargLine="--enable-preview"

      - name: Verify Build Artifacts
        run: ls -lah target/

  native-image:
    name: Build Native Image (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # ✅ Run on all OSes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up GraalVM on ${{ matrix.os }}
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '23'
          distribution: 'graalvm-community'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify GraalVM Installation
        run: java -version && native-image --version

      - name: Build Native Image
        run: |
          mvn -Pnative clean package
        shell: bash

      - name: Rename Native Image for Platform
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            mv target/MyApp target/MyApp-linux
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            mv target/MyApp target/MyApp-macos
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv target/MyApp.exe target/MyApp-windows.exe
          fi
        shell: bash

      - name: Upload Native Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MyApp-${{ matrix.os }}
          path: target/MyApp*

  release:
    name: Create Release
    needs: [build-test, native-image]  # ✅ Ensures all builds pass before releasing
    if: startsWith(github.ref, 'refs/tags/v')  # ✅ Only runs when a tag like v1.0.0 is pushed
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all Native Image Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List Downloaded Files
        run: ls -lah artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          files: |
            target/MyApp-*-release.zip
            artifacts/MyApp-linux
            artifacts/MyApp-macos
            artifacts/MyApp-windows.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
